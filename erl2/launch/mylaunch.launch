<?xml version="1.0"?>

<launch>

<include file="$(find exprob_2_moveit)/launch/demo_gazebo.launch"/> 

<node name="go_to_point" pkg="erl2" type="go_to_point_action.py" respawn="false"/>

<!-- arguments -->
<arg name="domain_path" default="$(find erl2)/domain_turtlebot.pddl" />
<arg name="problem_path" default="$(find erl2)/problem_turtlebot.pddl" />
<!-- knowledge base -->
<node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false">
	<param name="domain_path" value="$(arg domain_path)" />
	<param name="problem_path" value="$(arg problem_path)" />
<!-- conditional planning flags -->
	<param name="use_unknowns" value="false" />
</node>
<!-- problem generation -->
<include file="$(find rosplan_planning_system)/launch/includes/problem_interface.launch">
	<arg name="knowledge_base" value="rosplan_knowledge_base" />
	<arg name="domain_path" value="$(arg domain_path)" />
	<arg name="problem_path" value="$(find rosplan_demos)/common/new_problem.pddl" />
	<arg name="problem_topic" value="problem_instance" />
</include>

<arg name="planner_interface" default="popf_planner_interface" />

<include file="$(find rosplan_planning_system)/launch/includes/planner_interface.launch">
	<arg name="use_problem_topic" value="true" />
	<arg name="problem_topic" value="/rosplan_problem_interface/problem_instance" />
	<arg name="planner_topic" value="planner_output" />
	<arg name="domain_path" value="$(arg domain_path)" />
	<arg name="data_path" value="$(find rosplan_demos)/common/" />
	<arg name="planner_command" value="timeout 10 $(find rosplan_planning_system)/common/bin/popf
	DOMAIN PROBLEM" />
	<arg name="planner_interface"    value="$(arg planner_interface)" />
</include>

<node name="rosplan_parsing_interface" pkg="rosplan_planning_system" type="pddl_simple_plan_parser" respawn="false">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="planner_topic" value="/rosplan_planner_interface/planner_output" />
	<param name="plan_topic" value="complete_plan" />
</node>

<node name="rosplan_plan_dispatcher" pkg="rosplan_planning_system" type="pddl_simple_plan_dispatcher" respawn="false">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="plan_topic" value="/rosplan_parsing_interface/complete_plan" />
	<param name="action_dispatch_topic" value="action_dispatch" />
	<param name="action_feedback_topic" value="action_feedback" />
</node>

<!-- Launching ARMOR service-->
<node pkg="armor" type="execute" name="armor_service" args="it.emarolab.armor.ARMORMainService"/>

<!-- Launching ontology interface-->
<node name="onto_interface"  pkg="erl2" type="onto_interface.py" output="screen" />

<!-- Launching simulation file-->
<node name="simulation" pkg="erl2" type="simulation" output="screen"/>


<!-- Launching rosservices for pddl -->

<!--node name="generator" pkg="rosservice" type="rosservice" args="call /rosplan_problem_interface/problem_generation_server" output="screen"/>
<node name="planner" pkg="rosservice" type="rosservice" args="call /rosplan_planner_interface/planning_server" output="screen"/>
<node name="parser" pkg="rosservice" type="rosservice" args="call /rosplan_parsing_interface/parse_plan" output="screen"/>
<node name="dispatcher" pkg="rosservice" type="rosservice" args="call /rosplan_plan_dispatcher/dispatch_plan" output="screen"/-->
 

<!-- Real actions -->

<node name="rosplan_interface_goto_waypoint" pkg="my_rosplan_interface" type="movingaction" output="screen" respawn="false">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="pddl_action_name" value="goto_waypoint" />
	<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
	<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<node name="rosplan_interface_goto_home" pkg="my_rosplan_interface" type="goinghomeaction" output="screen" respawn="false">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="pddl_action_name" value="goto_home" />
	<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
	<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<node name="rosplan_interface_movefrom_home" pkg="my_rosplan_interface" type="movefromhomeaction" output="screen" respawn="false">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="pddl_action_name" value="movefrom_home" />
	<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
	<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<node name="rosplan_interface_take_hint" pkg="my_rosplan_interface" type="takehintaction" output="screen" respawn="false">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="pddl_action_name" value="take_hint" />
	<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
	<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<node name="rosplan_interface_check_hint" pkg="my_rosplan_interface" type="checkhintaction" output="screen" respawn="false">
	<param name="knowledge_base" value="rosplan_knowledge_base" />
	<param name="pddl_action_name" value="check_hint" />
	<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
	<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<!-- Simulated actions -->

<!--include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="goto_waypoint" />
</include>

<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="goto_home" />
</include>

<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="movefrom_home" />
</include>

<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
<arg name="pddl_action_name" value="take_hint" />
</include>

<include file="$(find rosplan_planning_system)/launch/includes/simulated_action.launch" >
	<arg name="pddl_action_name" value="check_hint" />
	<arg name="action_probability" value="0.2"/>
</include-->

<!--Launching node for relplanning-->
<node name="planning_loop" pkg="erl2" type="planning.py"/>

</launch>
